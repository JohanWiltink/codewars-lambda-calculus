# JohanWiltink

# primes
# according to The Real Sieve of Erathosthenes

#import Combinators.lc

B  = \ f g x . f (g x)
C  = \ f x y . f y x
I  = \ x . x
K  = \ x _ . x
KI = \ _ x . x
M  = \ x . x x
S  = \ f g x . f x (g x)
T  = \ x f . f x
V  = \ x y f . f x y
W  = \ f x . f x x
Y = \ f . ( \ x . f (x x) ) ( \ x . f (x x) )
Z  = \ f . ( \ x . f \ y . x x y ) ( \ x . f \ y . x x y )

#import Ordering.lc

LT = \ lt eq gt . lt
EQ = \ lt eq gt . eq
GT = \ lt eq gt . gt

# import Booleans.lc

False = \ false true . false
True = \ false true . true

# data Number = End | Even Number | Odd Number

# zero :: Int
zero = \ end even odd . end

# shiftR0,shiftR1 :: Int -> Int
shiftR0 = \ n . \ end even odd . even n # mind that a shiftR in LE is a multiplication
shiftR1 = \ n . \ end even odd . odd  n # mind that a shiftR in LE is a multiplication

# isZero :: Int -> Bool
isZero = \ n . n True (K False) (K False)

# unpad :: Int -> Int
unpad = \ n . n zero ( \ z . ( \ unpadZ . isZero unpadZ (shiftR0 unpadZ) zero ) (unpad z) ) (B shiftR1 unpad)

# succ,pred :: Int -> Int
succ = \ n . n (shiftR1 zero) shiftR1 (B shiftR0 succ)
go = \ prefix n . n zero
                    (go (B prefix shiftR1))
                    ( \ z . z (prefix z) (K (prefix (shiftR0 z))) (K (prefix (shiftR0 z))) )
pred = go I

# compare :: Int -> Int -> Ordering
compare = \ m n . m (n EQ (K LT) (K LT))
                    ( \ zm . n GT (compare zm) ( \ zn . compare zm zn LT LT GT ) )
                    ( \ zm . n GT ( \ zn . compare zm zn LT GT GT ) (compare zm) )
# eq,gt :: Int -> Int -> Bool
eq = \ m n . compare m n False True  False
gt = \ m n . compare m n False False True

# plus,mult,minus :: Int -> Int -> Int
plus = \ m n . m n
                 ( \ zm . n (shiftR0 zm) (B shiftR0 (plus zm)) (B shiftR1 (plus zm)) )
                 ( \ zm . n (shiftR1 zm) (B shiftR1 (plus zm)) (B shiftR0 (B succ (plus zm))) )

mult = \ m n . m m
               ( \ zm . n n
                          ( \ zn . shiftR0 (shiftR0 (mult zm zn)) )
                          ( \ zn . shiftR0 (mult zm (shiftR1 zn)) )
               )
               ( \ zm . n n
                          ( \ zn . shiftR0 (mult (shiftR1 zm) zn) )
                          ( \ zn . plus (shiftR1 zn) (shiftR0 (mult zm (shiftR1 zn))) )
               )
unsafeMinus = \ m n . m zero
                        ( \ zm . n (shiftR0 zm) (B shiftR0 (unsafeMinus zm)) (B shiftR1 (B pred (unsafeMinus zm))) )
                        ( \ zm . n (shiftR1 zm) (B shiftR1 (unsafeMinus zm)) (B shiftR0 (unsafeMinus zm)) )
minus = \ m n . gt m n zero (unpad (unsafeMinus m n)) # needs explicit unpad or will litter padding

# data Pair a b :: Pair a b

# pair :: a -> b -> Pair a b
pair = \ x y . \ pair . pair x y

# fst :: Pair a b -> a
fst = \ xy . xy ( \ x y . x )

# snd :: Pair a b -> b
snd = \ xy . xy ( \ x y . y )

# data Stream a :: Cons a (Stream a)

# cons :: a -> Stream a -> Stream a
cons = \ x xs . \ cons . cons x xs

# head :: Stream a -> a
head = \ xs . xs ( \ x xs . x )

# tail :: Stream a -> Stream a
tail = \ xs . xs ( \ x xs . xs )

# map :: (a -> b) -> Stream a -> Stream b
map = \ fn xs . xs ( \ x xs . cons (fn x) (map fn xs) )

# iterate :: (a -> a) -> a -> Stream a
iterate = \ fn x . cons x (iterate fn (fn x))

# le :: Stream a -> Stream a -> Bool
le = \ m n . compare (head m) (head n) True True False

# data Set a = Nil | Branch a (Set a) (Set a)

# empty :: Set a
empty = \ nil branch . nil

# branch :: a -> Set a -> Set a -> Set a
branch = \ x left right . \ nil branch . branch x left right

# insert :: (Ord a) => a -> Set a -> Set a
insert = \ x set .
             set
               (branch x empty empty)
               ( \ y left right .
                     le x y
                       (branch y left (insert x right))
                       (branch y (insert x left) right)
               )

# findMin :: (Partial) => Set a -> a
findMin = \ set . set ()
          \ x left right .
              left x ( \ _ _ _ . findMin left )

# minView :: (Partial) => Set a -> (a,Set a)
minView = \ set . set ()
          \ x left right .
              left
                (pair x right)
                ( \ _ _ _ . ( \ unpair . unpair \ y left' . pair y (branch x left' right) ) (minView left) )

# insertPrime :: Stream Int -> Set (Stream Int) -> Set (Stream Int)
insertPrime = \ candidates . candidates
              \ prime _ .
                  insert (map (mult prime) candidates)

# adjust :: Int -> Set (Stream Int) -> Set (Stream Int)
adjust = \ x table .
  ( \ unpair . unpair
    \ uncons table' . uncons
    \ n ns .
        eq n x
          table
          (adjust x (insert ns table'))
  )
  (minView table)

# sieve :: Set (Stream Int) -> Stream Int -> Stream Int
sieve = \ table xxs . xxs
        \ x xs .
            ( \ uncons . uncons
              \ n _ .
                  eq n x
                    (cons x (sieve (insertPrime xxs table) xs))
                    (sieve (adjust x table) xs)
            )
            (findMin table)

# firstSieve :: Stream Int -> Stream Int
firstSieve = \ xxs . xxs
             \ x xs .
                cons x (sieve (insertPrime xxs empty) xs)

# primes :: Stream Int
primes = cons 2 (firstSieve (iterate (plus 2) 3))
