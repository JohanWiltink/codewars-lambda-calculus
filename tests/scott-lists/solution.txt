# scott-list.lc

#import combinators.lc
B = \ f g x . f (g x)
BB = \ f g x y . f (g x y)
CB = \ f g x . g (f x)
C = \ f x y . f y x
I = \ x . x
K = \ x _ . x
KI = \ _ x . x
KK = \ x _ _ . x
M = \ x . x x
S = \ f g x . f x (g x)
T = \ x fn . fn x
V = \ x y fn . fn x y
W = \ f x . f x x
Y = \ f . ( \ x . f (x x) ) ( \ x . f (x x) )
#import scott-booleans.ls
False = K
True  = KI
not = C
and = M
or  = W C
#import scott-ordering.lc
LT = KK
EQ = K K
GT = K KI
#import scott-numbers.lc
zero = K
succ = \ n . \ _zero succ . succ n
pred = \ n . n zero I
add = \ m n . m n (B succ (add n))
sub = \ m n . m m (B (n m) sub)
mul = \ m n . m m (B (add n) (mul n))
is-zero = \ n . n True (K False)
one = succ zero
compare = \ m n . m (n EQ LT) (B (n GT) compare)
lt = \ m n . compare m n True  False False
le = \ m n . compare m n True  True  False
eq = \ m n . compare m n False True  False
ge = \ m n . compare m n False True  True
gt = \ m n . compare m n False False True
#import scott-pair.lc
Pair = V
fst = T K
snd = T KI
first  = \ fn xy  . xy \ x   . Pair (fn x)
second = \ fn xy  . xy \ x y . Pair x (fn y)
both   = \ fn xy  . xy \ x y . Pair (fn x) (fn y)
bimap  = \ f g xy . xy \ x y . Pair (f x) (g y)
curry  = \ fn x y . fn (Pair x y)
uncurry = T
#import scott-option.lc
None = K                           # = zero
Some = \ x . \ _none some . some x # = succ
option = V
is-none = \ x . x True (K False)   # = is-zero
is-some = \ x . x False (K True)
from-option = \ z x . x z I
from-some = \ x . x () I
# additional definitions depend on nil, cons, singleton

# data List a = Nil | Cons a (List a)

# nil :: List a
nil = K

# cons :: a -> List a -> List a
cons = \ x xs . \ _nil cons . cons x xs

# singleton :: a -> List a
singleton = \ x . cons x nil

# these scott-option definitions depend on nil, cons, singleton
list-to-option = \ xs . xs None \ x _xs . Some x
option-to-list = \ x . x nil singleton
map-option = \ fn xs . xs nil \ x xs . fn x (map-option fn xs) (C cons (map-option fn xs))
cat-options = map-option I

# continuing scott-list.lc

# foldr :: (a -> z -> z) -> z -> List a -> z
foldr = \ fn z xs . xs z \ x xs . fn x (foldr fn z xs)

# foldl :: (z -> a -> z) -> z -> List a -> z
foldl = \ fn z xs . xs z (B (foldl fn) (fn z))

# scanr :: (a -> z -> z) -> z -> List a -> List z
scanr = \ fn z xs . xs (singleton z) \ x xs . ( \ zs . zs () \ z _zs . cons (fn x z) zs ) (scanr fn z xs)

# scanl :: (z -> a -> z) -> z -> List a -> List z
scanl = \ fn z xs . cons z (xs nil (B (scanl fn) (fn z)))

# take :: Number -> List a -> List a
take = \ n xs . is-zero n (xs nil \ x xs . cons x (take (pred n) xs)) nil

# drop :: Number -> List a -> List a
drop = \ n xs . is-zero n (xs nil (K (drop (pred n)))) xs

# append :: List a -> List a -> List a
append = C (foldr cons)

# concat :: List (List a) -> List a
concat = foldr append nil

# snoc :: List a -> a -> List a
snoc = C (B (foldr cons) singleton)

# uncons :: List a -> Option (Pair a (List a))
uncons = \ xs . xs None (BB Some Pair)

# iterate :: (a -> a) -> a -> List a
iterate = \ fn x . cons x (iterate fn (fn x))

# repeat :: a -> List a
repeat = \ x . cons x (repeat x) # repeat = Y (S cons)

# cycle :: List a -> List a
cycle = \ xs . xs () (concat (repeat xs))

# replicate :: Number -> a -> List a
replicate = \ n . B (take n) repeat

# unfold :: (a -> Option (Pair z a)) -> a -> List z
unfold = \ fn x . fn x nil (T \ z x . cons z (unfold fn x))

# head :: List a -> a
head = \ xs . xs () K

# tail :: List a -> List a
tail = \ xs . xs () KI

# null :: List a -> Boolean
null = \ xs . xs True (KK False)

# length :: List a -> Number
length = foldr (K succ) zero

# sum,product :: List Number -> Number
sum = foldr add zero
product = foldr mul one

# map :: (a -> b) -> List a -> List b
map = \ fn . foldr (B cons fn) nil

# concat-map :: (a -> List b) -> List a -> List b
concat-map = BB concat map

# filter :: (a -> Boolean) -> List a -> List a
filter = \ p . foldr ( \ x z . p x z (cons x z) ) nil

# take-while :: (a -> Boolean) -> List a -> List a
take-while = \ p xs . xs nil \ x xs . p x nil (cons x (take-while p xs))

# drop-while :: (a -> Boolean) -> List a -> List a
drop-while = \ p xs . xs nil \ x xs . p x xs (drop-while p xs)

# drop-while-end :: (a -> Boolean) -> List a -> List a
drop-while-end = \ p . foldr ( \ x z . and (null z) (p x) (cons x z) nil ) nil

# split-at :: Number -> List a -> Pair (List a) (List a)
split-at = \ i xs . is-zero i (xs (Pair nil nil) \ x xs . first (cons x) (split-at (pred i) xs)) (Pair nil xs)

# get :: Number -> List a -> a
get = \ i xs . is-zero i (xs () (K (get (pred i)))) (head xs)

# set :: Number -> a -> List a -> List a
set = \ i x xs . uncurry append (second (B (cons x) tail) (split-at i xs))
set = \ i x xs . is-zero i (xs nil \ y . cons y (set (pred i) x)) (xs nil (K (cons x)))

# any :: (a -> Boolean) -> List a -> Boolean
any = \ p . foldr (B or p) False

# all :: (a -> Boolean) -> List a -> Boolean
all = \ p . foldr (B and p) True

# find :: (a -> Boolean) -> List a -> Option a
find = BB list-to-option filter

# find-indices :: (a -> Boolean) -> List a -> List Number
find-indices = \ p . foldr ( \ x k i . p x I (cons i) (k (succ i)) ) (K nil) zero

# find-index :: (a -> Boolean) -> List a -> Option Number
find-index = BB list-to-option find-indices

# partition :: (a -> Boolean) -> List a -> Pair (List a) (List a)
partition = \ p . foldr ( \ x . p x second first (cons x) ) (Pair nil nil)

# span :: (a -> Boolean) -> List a -> Pair (List a) (List a)
span = \ p xs . xs (Pair nil nil) \ y ys . p y (Pair nil xs) (first (cons y) (span p ys))

# minimum-by :: (a -> a -> Boolean) -> List a -> a
minimum-by = \ le xs . xs () (foldl \ z x . le z x x z)

# maximum-by :: (a -> a -> Boolean) -> List a -> a
maximum-by = \ le xs . xs () (foldl \ z x . le z x z x)

# insert-by :: (a -> a -> Boolean) -> a -> List a -> List a
insert-by = \ le x xs . uncurry append (second (cons x) (span (C le x) xs))

# sort-by :: (a -> a -> Boolean) -> List a -> List a
sort-by = \ le . foldr (insert-by le) nil
# has all sorts of bad implementation details, but it's simple

# reverse :: List a -> List a
reverse = foldl (C cons) nil

# zip-with :: (a -> b -> z) -> List a -> List b -> List z
zip-with = \ fn xs ys . xs nil \ x xs . ys nil \ y ys . cons (fn x y) (zip-with fn xs ys)

# zip :: List a -> List b -> List (Pair a b)
zip = zip-with Pair

# unzip :: List (Pair a b) -> Pair (List a) (List b)
unzip = foldr ( \ xy xys . xy \ x y . bimap (cons x) (cons y) xys ) (Pair nil nil)
unzip = foldr (CB \ x y . bimap (cons x) (cons y)) (Pair nil nil)

# group-by :: (a -> a -> Bool) -> List a -> List (List a)
group-by = \ eq xs . xs nil \ x xs . span (eq x) xs \ left right . cons (cons x left) (group-by eq right)

# lookup-by :: (a -> Boolean) -> List (Pair a b) -> Option b
lookup-by = \ p xys . xys None \ xy xys . xy \ x y . p x (lookup-by p xys) (Some y)

# nub-by :: (a -> a -> Boolean) -> List a -> List a
go = \ z eq xs . xs z \ x xs . go (is-none (find (eq x) z) z (cons x z)) eq xs
nub-by = go nil

# delete-by :: (a -> a -> Boolean) -> a -> List a -> List a
delete-by = \ eq x xs . xs nil \ y ys . eq x y (cons y (delete-by eq x ys)) ys

# delete-firsts-by :: (a -> a -> Boolean) -> List a -> List a -> List a
delete-firsts-by = \ eq . foldl (C (delete-by eq))

# init :: List a -> List a
init = \ xs . xs () (S (zip-with K) tail xs)

# last :: List a -> a
last = foldl KI ()

# tails :: List a -> List (List a)
tails = \ xs . cons xs (xs nil (K tails))

# inits :: List a -> List (List a)
inits = \ xs . xs (singleton nil) \ x xs . cons nil (map (cons x) (inits xs))

# slice :: Number -> Number -> List a -> List a
slice = \ i j xs . le i j nil (take (sub j i) (drop i xs))

# transpose :: List (List a) -> List (List a)
transpose = \ xss . xss nil
                        \ ys yss . ys (transpose yss)
                                      (unzip (map-option uncons xss) \ xs xss . cons xs (transpose xss))
